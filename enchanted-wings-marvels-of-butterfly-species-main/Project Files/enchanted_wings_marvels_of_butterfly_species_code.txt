!pip install tensorflow numpy matplotlib scikit-learn opencv-python --quiet

import os
import cv2
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from google.colab import drive

drive.mount('/content/drive')!pip install tensorflow numpy matplotlib scikit-learn opencv-python --quiet

import os
import cv2
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from google.colab import drive

drive.mount('/content/drive')

dataset_path = '/content/drive/MyDrive/Colab Notebooks/leedsbutterfly_dataset_v1.1/leedsbutterfly/images'
img_size = 128
data, labels = [], []
valid_extensions = ['.jpg', '.jpeg', '.png']

if not os.path.isdir(dataset_path):
    print(f"Error: dataset_path '{dataset_path}' is not a directory.")
else:
    for img_name in os.listdir(dataset_path):
        if any(img_name.lower().endswith(ext) for ext in valid_extensions):
            img_path = os.path.join(dataset_path, img_name)
            try:
                img = cv2.imread(img_path)
                if img is not None:
                    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
                    img = cv2.resize(img, (img_size, img_size))
                    data.append(img)
                    labels.append(1)
                else:
                    print(f"Failed to load image: {img_path}")
            except Exception as e:
                print(f"Error processing image {img_path}: {e}")

print(f"Total images attempted: {len(os.listdir(dataset_path))}")
print(f"Successfully loaded images: {len(data)}")

if len(data) == 0:
    print("No images were loaded. Please check your dataset.")
else:
    X = np.array(data, dtype='float32') / 255.0
    y = np.array(labels)

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    model = Sequential([
        Conv2D(32, (3,3), activation='relu', input_shape=(img_size, img_size, 3)),
        MaxPooling2D(2, 2),
        Conv2D(64, (3,3), activation='relu'),
        MaxPooling2D(2, 2),
        Flatten(),
        Dense(128, activation='relu'),
        Dropout(0.5),
        Dense(1, activation='sigmoid')
    ])

    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
    model.summary()

    datagen = ImageDataGenerator(rotation_range=20, zoom_range=0.15,
                                 width_shift_range=0.2, height_shift_range=0.2,
                                 horizontal_flip=True)
    
    datagen.fit(X_train)

    history = model.fit(datagen.flow(X_train, y_train, batch_size=32),
                        validation_data=(X_test, y_test),
                        epochs=10)

    loss, accuracy = model.evaluate(X_test, y_test)
    print(f"Test Accuracy: {accuracy * 100:.2f}%")

    index = np.random.randint(0, len(X_test))
    img = X_test[index]
    prediction = model.predict(np.expand_dims(img, axis=0))[0][0]
    predicted_class = "Butterfly" if prediction > 0.5 else "Not Butterfly"

    plt.imshow(img)
    plt.title(f"Predicted: {predicted_class} ({prediction:.2f})")
    plt.axis('off')
    plt.show()

    model.save("/content/butterfly_classifier_model.h5")
    print("Model saved as butterfly_classifier_model.h5")


dataset_path = '/content/drive/MyDrive/Colab Notebooks/leedsbutterfly_dataset_v1.1/leedsbutterfly/images'
img_size = 128
data, labels = [], []
valid_extensions = ['.jpg', '.jpeg', '.png']

if not os.path.isdir(dataset_path):
    print(f"Error: dataset_path '{dataset_path}' is not a directory.")
else:
    for img_name in os.listdir(dataset_path):
        if any(img_name.lower().endswith(ext) for ext in valid_extensions):
            img_path = os.path.join(dataset_path, img_name)
            try:
                img = cv2.imread(img_path)
                if img is not None:
                    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
                    img = cv2.resize(img, (img_size, img_size))
                    data.append(img)
                    labels.append(1)
                else:
                    print(f"Failed to load image: {img_path}")
            except Exception as e:
                print(f"Error processing image {img_path}: {e}")

print(f"Total images attempted: {len(os.listdir(dataset_path))}")
print(f"Successfully loaded images: {len(data)}")

if len(data) == 0:
    print("No images were loaded. Please check your dataset.")
else:
    X = np.array(data, dtype='float32') / 255.0
    y = np.array(labels)

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    model = Sequential([
        Conv2D(32, (3,3), activation='relu', input_shape=(img_size, img_size, 3)),
        MaxPooling2D(2, 2),
        Conv2D(64, (3,3), activation='relu'),
        MaxPooling2D(2, 2),
        Flatten(),
        Dense(128, activation='relu'),
        Dropout(0.5),
        Dense(1, activation='sigmoid')
    ])

    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
    model.summary()

    datagen = ImageDataGenerator(rotation_range=20, zoom_range=0.15,
                                 width_shift_range=0.2, height_shift_range=0.2,
                                 horizontal_flip=True)
    
    datagen.fit(X_train)

    history = model.fit(datagen.flow(X_train, y_train, batch_size=32),
                        validation_data=(X_test, y_test),
                        epochs=10)

    loss, accuracy = model.evaluate(X_test, y_test)
    print(f"Test Accuracy: {accuracy * 100:.2f}%")

    index = np.random.randint(0, len(X_test))
    img = X_test[index]
    prediction = model.predict(np.expand_dims(img, axis=0))[0][0]
    predicted_class = "Butterfly" if prediction > 0.5 else "Not Butterfly"

    plt.imshow(img)
    plt.title(f"Predicted: {predicted_class} ({prediction:.2f})")
    plt.axis('off')
    plt.show()

    model.save("/content/butterfly_classifier_model.h5")
    print("Model saved as butterfly_classifier_model.h5")
